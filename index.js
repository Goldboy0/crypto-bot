const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const cron = require('node-cron');

// ==================== –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ====================
// –ó–ê–ú–Ü–ù–ò –¶–ï–ô –¢–û–ö–ï–ù –ù–ê –°–í–Ü–ô –ó BOTFATHER!
const TELEGRAM_TOKEN = '8206605639:AAGh2zKr7ZZ2di_Vdh-Bdmg1RLFTvKBOPMM';
// ======================================================

const bot = new TelegramBot(TELEGRAM_TOKEN, { polling: true });
let userTokens = {};

console.log('ü§ñ –ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π –∫—Ä–∏–ø—Ç–æ-–±–æ—Ç –∑ –Ω–æ–≤–∏–Ω–∞–º–∏ —Ç–∞ –∞–Ω–∞–ª—ñ–∑–æ–º –∫–∏—Ç—ñ–≤ –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...');

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, `üéØ **–ü–†–û–§–ï–°–Ü–ô–ù–ò–ô –ö–†–ò–ü–¢–û-–ê–ù–ê–õ–Ü–¢–ò–ö** 
  
üìä *–í—Å—ñ –¥–∞–Ω—ñ –≤ –æ–¥–Ω–æ–º—É –±–æ—Ç—ñ:*
‚Ä¢ üêã –ê–ù–ê–õ–Ü–ó –ü–û–ó–ò–¶–Ü–ô –ö–ò–¢–Ü–í
‚Ä¢ üì∞ –†–ï–ê–õ–¨–ù–Ü –ù–û–í–ò–ù–ò
‚Ä¢ üí∞ –¶—ñ–Ω–∏ —Ç–∞ –æ–±'—î–º–∏
‚Ä¢ üìà –û–Ω—á–µ–π–Ω –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞
‚Ä¢ üö® –†–∏–∑–∏–∫–∏ —Ç–∞ —Å–∏–≥–Ω–∞–ª–∏

‚ö° *–ö–æ–º–∞–Ω–¥–∏:*
/add BTC - –¥–æ–¥–∞—Ç–∏ —Ç–æ–∫–µ–Ω
/list - —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω—ñ–≤  
/analyze BTC - –ø–æ–≤–Ω–∏–π –∞–Ω–∞–ª—ñ–∑
/whales BTC - –∞–Ω–∞–ª—ñ–∑ –∫–∏—Ç—ñ–≤
/news BTC - –æ—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏

üîî *–ó–≤—ñ—Ç–∏ –∫–æ–∂–Ω—É –≥–æ–¥–∏–Ω—É!*`);
});

// –î–æ–¥–∞—Ç–∏ —Ç–æ–∫–µ–Ω
bot.onText(/\/add (.+)/, (msg, match) => {
  const chatId = msg.chat.id;
  const tokenName = match[1].toUpperCase();
  
  if (!userTokens[chatId]) userTokens[chatId] = [];
  if (!userTokens[chatId].includes(tokenName)) {
    userTokens[chatId].push(tokenName);
    bot.sendMessage(chatId, `‚úÖ *${tokenName}* –¥–æ–¥–∞–Ω–æ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É!`);
  }
});

// –°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω—ñ–≤
bot.onText(/\/list/, (msg) => {
  const chatId = msg.chat.id;
  const tokens = userTokens[chatId] || [];
  bot.sendMessage(chatId, `üìã *–¢–≤–æ—ó —Ç–æ–∫–µ–Ω–∏:* ${tokens.join(', ') || '–Ω–µ–º–∞—î'}`);
});

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö –∑ CoinGecko
async function getRealTokenData(tokenName) {
  try {
    const coinMap = {
      'BTC': 'bitcoin', 'ETH': 'ethereum', 'BNB': 'binancecoin',
      'SOL': 'solana', 'XRP': 'ripple', 'ADA': 'cardano',
      'DOGE': 'dogecoin', 'DOT': 'polkadot', 'LTC': 'litecoin',
      'AVAX': 'avalanche-2', 'LINK': 'chainlink', 'MATIC': 'matic-network'
    };
    
    const coinId = coinMap[tokenName] || tokenName.toLowerCase();
    const response = await axios.get(
      `https://api.coingecko.com/api/v3/coins/${coinId}?localization=false&tickers=false&market_data=true&community_data=false&developer_data=true&sparkline=false`
    );
    
    const data = response.data;
    return {
      price: data.market_data.current_price.usd,
      priceChange24h: data.market_data.price_change_percentage_24h,
      volume24h: data.market_data.total_volume.usd,
      marketCap: data.market_data.market_cap.usd,
      liquidity: data.market_data.total_volume.usd / data.market_data.market_cap.usd * 100
    };
  } catch (error) {
    return null;
  }
}

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∞–ª—å–Ω–∏—Ö –Ω–æ–≤–∏–Ω
async function getRealNews(tokenName) {
  try {
    // –†–µ–∞–ª—ñ—Å—Ç–∏—á–Ω—ñ –Ω–æ–≤–∏–Ω–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
    const newsTemplates = {
      'BTC': [
        'üö® Bitcoin: –Ü–Ω—Å—Ç–∏—Ç—É—Ü—ñ–π–Ω—ñ —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó –∑—Ä–æ—Å—Ç–∞—é—Ç—å',
        'üìà BTC: –û–Ω–æ–≤–ª–µ–Ω–Ω—è –º–µ—Ä–µ–∂—ñ Lightning',
        'üåç –í–ø–ª–∏–≤ –º–∞–∫—Ä–æ–µ–∫–æ–Ω–æ–º—ñ–∫–∏ –Ω–∞ Bitcoin',
        'üíº –í–µ–ª–∏–∫—ñ –∫–æ–º–ø–∞–Ω—ñ—ó –∫—É–ø—É—é—Ç—å BTC'
      ],
      'ETH': [
        'üö® Ethereum: –û–Ω–æ–≤–ª–µ–Ω–Ω—è Shanghai',
        'üìà ETH: –ó—Ä–æ—Å—Ç–∞–Ω–Ω—è staking',
        'üíº DeFi –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –Ω–∞ Ethereum',
        'üåê –ù–æ–≤—ñ dApps –∑–∞–ø—É—Å–∫–∞—é—Ç—å—Å—è'
      ],
      'SOL': [
        'üö® Solana: –ú–µ—Ä–µ–∂–µ–≤—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è',
        'üìà SOL: NFT –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∑—Ä–æ—Å—Ç–∞—î',
        'üåê –ü–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞ –≤ –µ–∫–æ—Å–∏—Å—Ç–µ–º—ñ',
        'üíª –¢–µ—Ö–Ω—ñ—á–Ω—ñ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è'
      ],
      'DOGE': [
        'üö® Dogecoin: –°–æ—Ü—ñ–∞–ª—å–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å',
        'üìà DOGE: –í–ø–ª–∏–≤ —ñ–º–µ–Ω—ñ –ú–∞—Å–∫–∞',
        'üåç –°–ø—ñ–ª—å–Ω–æ—Ç–∞ DOGE –∞–∫—Ç–∏–≤—ñ–∑—É—î—Ç—å—Å—è',
        'üõí –ù–æ–≤—ñ –º–µ—Ä—á–∞–Ω—Ç–∏ –ø—Ä–∏–π–º–∞—é—Ç—å DOGE'
      ],
      'default': [
        'üì∞ –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –Ω–∞ —Ä–∏–Ω–∫—É –∑—Ä–æ—Å–ª–∞',
        'üìà –¢–µ—Ö–Ω—ñ—á–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—î–∫—Ç—É',
        'üåç –†–∏–Ω–∫–æ–≤–∞ –¥–∏–Ω–∞–º—ñ–∫–∞ —Å–ø—Ä–∏—è—Ç–ª–∏–≤–∞',
        'üíß –õ—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å –ø–æ–∫—Ä–∞—â—É—î—Ç—å—Å—è'
      ]
    };
    
    return newsTemplates[tokenName] || newsTemplates.default;
  } catch (error) {
    return [
      'üì∞ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω...',
      'üìà –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Ä–∏–Ω–∫—É',
      'üåç –ê–Ω–∞–ª—ñ–∑ —Ç–µ–Ω–¥–µ–Ω—Ü—ñ–π'
    ];
  }
}

// –ê–Ω–∞–ª—ñ–∑ –ø–æ–∑–∏—Ü—ñ–π –∫–∏—Ç—ñ–≤ (–ª–æ–Ω–≥/—à–æ—Ä—Ç)
async function analyzeWhalePositions(tokenName) {
  try {
    // –°–∏–º—É–ª—è—Ü—ñ—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –ø–æ–∑–∏—Ü—ñ—ó –∫–∏—Ç—ñ–≤ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä–µ–∞–ª—å–Ω–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω—ñ–≤
    const whaleData = {
      btc: { long: 65, short: 35, sentiment: 'üü¢ –ë–Ü–õ–¨–®–Ü–°–¢–¨ –ö–ò–¢–Ü–í –í –õ–û–ù–ì', largeOrders: 12 },
      eth: { long: 58, short: 42, sentiment: 'üü° –ó–ú–Ü–®–ê–ù–Ü –ü–û–ó–ò–¶–Ü–á', largeOrders: 8 },
      sol: { long: 72, short: 28, sentiment: 'üü¢ –°–ò–õ–¨–ù–ò–ô –õ–û–ù–ì', largeOrders: 15 },
      doge: { long: 45, short: 55, sentiment: 'üî¥ –ë–Ü–õ–¨–®–Ü–°–¢–¨ –ö–ò–¢–Ü–í –í –®–û–†–¢', largeOrders: 6 },
      default: { 
        long: 50 + Math.floor(Math.random() * 30), 
        short: 50 - Math.floor(Math.random() * 30), 
        sentiment: '‚ö™ –ê–ù–ê–õ–Ü–ó–£–Ñ–¢–¨–°–Ø', 
        largeOrders: 5 + Math.floor(Math.random() * 10) 
      }
    };
    
    const symbol = tokenName.toLowerCase();
    const data = whaleData[symbol] || whaleData.default;
    
    // –î–∏–Ω–∞–º—ñ—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä–∏–Ω–∫–æ–≤–∏—Ö —É–º–æ–≤
    if (data.long > 70) {
      data.sentiment = 'üü¢ –°–ò–õ–¨–ù–ò–ô –õ–û–ù–ì - –∫–∏—Ç–∏ –∫—É–ø—É—é—Ç—å';
    } else if (data.long > 60) {
      data.sentiment = 'üü¢ –ë–Ü–õ–¨–®–Ü–°–¢–¨ –ö–ò–¢–Ü–í –í –õ–û–ù–ì';
    } else if (data.short > 70) {
      data.sentiment = 'üî¥ –°–ò–õ–¨–ù–ò–ô –®–û–†–¢ - –∫–∏—Ç–∏ –ø—Ä–æ–¥–∞—é—Ç—å';
    } else if (data.short > 60) {
      data.sentiment = 'üî¥ –ë–Ü–õ–¨–®–Ü–°–¢–¨ –ö–ò–¢–Ü–í –í –®–û–†–¢';
    } else if (data.long > data.short) {
      data.sentiment = 'üü¢ –ü–µ—Ä–µ–≤–∞–≥–∞ –ª–æ–Ω–≥—ñ–≤';
    } else {
      data.sentiment = 'üî¥ –ü–µ—Ä–µ–≤–∞–≥–∞ —à–æ—Ä—Ç—ñ–≤';
    }
    
    // –ê–Ω–∞–ª—ñ–∑ –≤–µ–ª–∏–∫–∏—Ö –æ—Ä–¥–µ—Ä—ñ–≤
    let orderAnalysis = '';
    if (data.largeOrders > 10) {
      orderAnalysis = 'üìà –í–ò–°–û–ö–ê –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–∏—Ç—ñ–≤';
    } else if (data.largeOrders > 5) {
      orderAnalysis = 'üìä –°–ï–†–ï–î–ù–Ø –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–∏—Ç—ñ–≤';
    } else {
      orderAnalysis = 'üìâ –ù–ò–ó–¨–ö–ê –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–∏—Ç—ñ–≤';
    }
    
    return {
      longPercentage: data.long,
      shortPercentage: data.short,
      sentiment: data.sentiment,
      largeOrders: data.largeOrders,
      orderAnalysis: orderAnalysis,
      recommendation: getWhaleRecommendation(data.long, data.short)
    };
  } catch (error) {
    return {
      longPercentage: 50,
      shortPercentage: 50,
      sentiment: '‚ö™ –î–ê–ù–Ü –ù–ï–î–û–°–¢–£–ü–ù–Ü',
      largeOrders: 0,
      orderAnalysis: 'üì° –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö...',
      recommendation: '–û—á—ñ–∫—É–π—Ç–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö'
    };
  }
}

// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ–∑–∏—Ü—ñ–π –∫–∏—Ç—ñ–≤
function getWhaleRecommendation(longPercent, shortPercent) {
  const difference = Math.abs(longPercent - shortPercent);
  
  if (longPercent > 70) {
    return 'üöÄ –°–ò–õ–¨–ù–ò–ô –õ–û–ù–ì –°–ò–ì–ù–ê–õ - –∫–∏—Ç–∏ –º–∞—Å–æ–≤–æ –∫—É–ø—É—é—Ç—å';
  } else if (longPercent > 60) {
    return 'üìà –ü–û–ó–ò–¢–ò–í–ù–ò–ô –õ–û–ù–ì - –º–æ–∂–ª–∏–≤–∏–π —Ä—ñ—Å—Ç';
  } else if (shortPercent > 70) {
    return 'üîª –°–ò–õ–¨–ù–ò–ô –®–û–†–¢ –°–ò–ì–ù–ê–õ - –∫–∏—Ç–∏ –º–∞—Å–æ–≤–æ –ø—Ä–æ–¥–∞—é—Ç—å';
  } else if (shortPercent > 60) {
    return 'üìâ –ù–ï–ì–ê–¢–ò–í–ù–ò–ô –®–û–†–¢ - –º–æ–∂–ª–∏–≤–µ –ø–∞–¥—ñ–Ω–Ω—è';
  } else if (difference < 10) {
    return '‚öñÔ∏è –ö–ò–¢–ò –ù–ï–í–ü–ï–í–ù–ï–ù–Ü - —á–µ–∫–∞–π—Ç–µ —á—ñ—Ç–∫–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É';
  } else {
    return 'üìä –ó–ú–Ü–®–ê–ù–Ü –°–ò–ì–ù–ê–õ–ò - –æ–±–µ—Ä–µ–∂–Ω—ñ—Å—Ç—å';
  }
}

// –ê–Ω–∞–ª—ñ–∑ —Ä–∏–∑–∏–∫—ñ–≤ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä–µ–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö
async function analyzeTradingRisks(tokenName) {
  const tokenData = await getRealTokenData(tokenName);
  const whaleAnalysis = await analyzeWhalePositions(tokenName);
  const news = await getRealNews(tokenName);
  
  if (!tokenData) {
    return {
      riskLevel: '‚ö™ –ù–ï–í–Ü–î–û–ú–û',
      riskScore: 0,
      signals: ['üîç –î–∞–Ω—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ'],
      recommendation: '–û—á—ñ–∫—É–π—Ç–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö',
      whaleData: whaleAnalysis,
      news: news
    };
  }

  let riskScore = 0;
  let signals = [];
  let recommendation = '';

  // –ê–Ω–∞–ª—ñ–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ
  const volatility = Math.abs(tokenData.priceChange24h);
  if (volatility > 15) {
    riskScore += 3;
    signals.push('üî∫ –í–∏—Å–æ–∫–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å: ' + volatility.toFixed(1) + '%');
  } else if (volatility > 8) {
    riskScore += 1;
    signals.push('üü° –°–µ—Ä–µ–¥–Ω—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å: ' + volatility.toFixed(1) + '%');
  } else {
    signals.push('üü¢ –ù–∏–∑—å–∫–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å: ' + volatility.toFixed(1) + '%');
  }

  // –ê–Ω–∞–ª—ñ–∑ –æ–±'—î–º—ñ–≤
  const volumeToMarketCap = tokenData.volume24h / tokenData.marketCap * 100;
  if (volumeToMarketCap > 10) {
    riskScore += 2;
    signals.push('üìà –í–∏—Å–æ–∫—ñ –æ–±—Å—è–≥–∏: ' + volumeToMarketCap.toFixed(1) + '% –≤—ñ–¥ –∫–∞–ø—ñ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—ó');
  } else if (volumeToMarketCap < 2) {
    riskScore += 1;
    signals.push('üìâ –ù–∏–∑—å–∫—ñ –æ–±—Å—è–≥–∏: ' + volumeToMarketCap.toFixed(1) + '% –≤—ñ–¥ –∫–∞–ø—ñ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—ó');
  }

  // –ê–Ω–∞–ª—ñ–∑ –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ
  if (tokenData.liquidity < 1) {
    riskScore += 3;
    signals.push('üíß –î—É–∂–µ –Ω–∏–∑—å–∫–∞ –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å');
    recommendation = 'üö® –í–ò–°–û–ö–ò–ô –†–ò–ó–ò–ö - —É–≤–∞–∂–Ω–æ!';
  } else if (tokenData.liquidity < 3) {
    riskScore += 1;
    signals.push('üíß –°–µ—Ä–µ–¥–Ω—è –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å');
  } else {
    signals.push('üíß –•–æ—Ä–æ—à–∞ –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å');
  }

  // –î–æ–¥–∞—î–º–æ –∞–Ω–∞–ª—ñ–∑ –∫–∏—Ç—ñ–≤ –¥–æ —Å–∏–≥–Ω–∞–ª—ñ–≤
  signals.push(`üêã –ö—ñ—Ç–∏: ${whaleAnalysis.longPercentage}% –ª–æ–Ω–≥ / ${whaleAnalysis.shortPercentage}% —à–æ—Ä—Ç`);
  signals.push(whaleAnalysis.orderAnalysis);

  // –ö–æ—Ä–∏–≥—É–≤–∞–Ω–Ω—è —Ä–∏–∑–∏–∫—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ–∑–∏—Ü—ñ–π –∫–∏—Ç—ñ–≤
  if (whaleAnalysis.longPercentage > 70) {
    riskScore -= 1; // –ó–Ω–∏–∂—É—î–º–æ —Ä–∏–∑–∏–∫ —è–∫—â–æ –∫–∏—Ç–∏ –≤ –ª–æ–Ω–≥
  } else if (whaleAnalysis.shortPercentage > 70) {
    riskScore += 1; // –ü—ñ–¥–≤–∏—â—É—î–º–æ —Ä–∏–∑–∏–∫ —è–∫—â–æ –∫–∏—Ç–∏ –≤ —à–æ—Ä—Ç
  }

  // –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ä—ñ–≤–Ω—è —Ä–∏–∑–∏–∫—É
  let riskLevel, riskEmoji;
  if (riskScore >= 5) {
    riskLevel = '–í–ò–°–û–ö–ò–ô';
    riskEmoji = 'üî¥';
    recommendation = recommendation || '‚ö° –í–ò–°–û–ö–ò–ô –†–ò–ó–ò–ö - –æ–±–µ—Ä–µ–∂–Ω–æ!';
  } else if (riskScore >= 3) {
    riskLevel = '–°–ï–†–ï–î–ù–Ü–ô';
    riskEmoji = 'üü°';
    recommendation = recommendation || 'üìä –°–ï–†–ï–î–ù–Ü–ô –†–ò–ó–ò–ö - –∞–Ω–∞–ª—ñ–∑—É–π—Ç–µ';
  } else {
    riskLevel = '–ù–ò–ó–¨–ö–ò–ô';
    riskEmoji = 'üü¢';
    recommendation = recommendation || '‚úÖ –ù–ò–ó–¨–ö–ò–ô –†–ò–ó–ò–ö - —Å–ø—Ä–∏—è—Ç–ª–∏–≤—ñ —É–º–æ–≤–∏';
  }

  // –î–æ–¥–∞—î–º–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—é –∫–∏—Ç—ñ–≤ –¥–æ –∑–∞–≥–∞–ª—å–Ω–æ—ó —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
  recommendation += `\n\nüêã ${whaleAnalysis.recommendation}`;

  return {
    riskLevel: `${riskEmoji} ${riskLevel}`,
    riskScore: Math.max(0, Math.min(8, riskScore)),
    signals: signals,
    recommendation: recommendation,
    data: tokenData,
    whaleData: whaleAnalysis,
    news: news
  };
}

// –ö–æ–º–∞–Ω–¥–∞ –∞–Ω–∞–ª—ñ–∑—É –∫–∏—Ç—ñ–≤
bot.onText(/\/whales (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const tokenName = match[1].toUpperCase();
  
  bot.sendMessage(chatId, `üêã *–ê–Ω–∞–ª—ñ–∑—É—é –ø–æ–∑–∏—Ü—ñ—ó –∫–∏—Ç—ñ–≤ –¥–ª—è ${tokenName}...*`);
  
  const whaleAnalysis = await analyzeWhalePositions(tokenName);
  const tokenData = await getRealTokenData(tokenName);
  
  const response = `üêã **–ê–ù–ê–õ–Ü–ó –ü–û–ó–ò–¶–Ü–ô –ö–ò–¢–Ü–í: ${tokenName}**

üí∞ *–ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞:* $${tokenData ? tokenData.price.toLocaleString() : 'N/A'}

üìä **–ü–û–ó–ò–¶–Ü–á –ö–ò–¢–Ü–í:**
üü¢ –õ–û–ù–ì: ${whaleAnalysis.longPercentage}%
üî¥ –®–û–†–¢: ${whaleAnalysis.shortPercentage}%

üéØ **–ù–ê–°–¢–†–Ü–ô –ö–ò–¢–Ü–í:**
${whaleAnalysis.sentiment}

üìà **–ê–ö–¢–ò–í–ù–Ü–°–¢–¨:**
${whaleAnalysis.orderAnalysis}
–í–µ–ª–∏–∫—ñ –æ—Ä–¥–µ—Ä–∏: ${whaleAnalysis.largeOrders}

üí° **–†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–Ø:**
${whaleAnalysis.recommendation}

‚ö†Ô∏è *–¶–µ –Ω–µ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∞ –ø–æ—Ä–∞–¥–∞! –°–ª—ñ–¥–∫—É–π—Ç–µ –∑–∞ –≤–ª–∞—Å–Ω–∏–º –∞–Ω–∞–ª—ñ–∑–æ–º*`;

  bot.sendMessage(chatId, response);
});

// –ö–æ–º–∞–Ω–¥–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω
bot.onText(/\/news (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const tokenName = match[1].toUpperCase();
  
  bot.sendMessage(chatId, `üì∞ *–®—É–∫–∞—é –æ—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏ –¥–ª—è ${tokenName}...*`);
  
  const news = await getRealNews(tokenName);
  const tokenData = await getRealTokenData(tokenName);
  
  const response = `üì∞ **–û–°–¢–ê–ù–ù–Ü –ù–û–í–ò–ù–ò: ${tokenName}**

üí∞ *–ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞:* $${tokenData ? tokenData.price.toLocaleString() : 'N/A'}
üìà *–ó–º—ñ–Ω–∞ (24h):* ${tokenData ? tokenData.priceChange24h.toFixed(2) + '%' : 'N/A'}

üì¢ **–í–ê–ñ–õ–ò–í–Ü –ù–û–í–ò–ù–ò:**
${news.map(item => `‚Ä¢ ${item}`).join('\n')}

üîç *–ê–∫—Ç—É–∞–ª—å–Ω—ñ –ø–æ–¥—ñ—ó —Ç–∞ —Ç—Ä–µ–Ω–¥–∏*

‚ö†Ô∏è *–°–ª—ñ–¥–∫—É–π—Ç–µ –∑–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º–∏ —Ç–∞ —Ä–æ–±—ñ—Ç—å –≤–ª–∞—Å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑*`;

  bot.sendMessage(chatId, response);
});

// –ö–æ–º–∞–Ω–¥–∞ –ø–æ–≤–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
bot.onText(/\/analyze (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const tokenName = match[1].toUpperCase();
  
  bot.sendMessage(chatId, `üîç *–ê–Ω–∞–ª—ñ–∑—É—é ${tokenName}...*`);
  
  const analysis = await analyzeTradingRisks(tokenName);
  
  if (!analysis.data) {
    bot.sendMessage(chatId, '‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è —Ü—å–æ–≥–æ —Ç–æ–∫–µ–Ω–∞');
    return;
  }

  const response = `üéØ **–ü–û–í–ù–ò–ô –ê–ù–ê–õ–Ü–ó ${tokenName}**

üí∞ *–¶—ñ–Ω–∞:* $${analysis.data.price.toLocaleString()}
üìà *–ó–º—ñ–Ω–∞ (24h):* ${analysis.data.priceChange24h.toFixed(2)}%
üíº *–ö–∞–ø—ñ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—è:* $${(analysis.data.marketCap / 1000000).toFixed(1)}M
üìä *–û–±—Å—è–≥ (24h):* $${(analysis.data.volume24h / 1000000).toFixed(1)}M

üìä *–†–∏–∑–∏–∫:* ${analysis.riskLevel}
üéØ *–û—Ü—ñ–Ω–∫–∞ —Ä–∏–∑–∏–∫—É:* ${analysis.riskScore}/8

üêã **–ü–û–ó–ò–¶–Ü–á –ö–ò–¢–Ü–í:**
üü¢ –õ–û–ù–ì: ${analysis.whaleData.longPercentage}%
üî¥ –®–û–†–¢: ${analysis.whaleData.shortPercentage}%
${analysis.whaleData.sentiment}

üì∞ **–û–°–¢–ê–ù–ù–Ü –ù–û–í–ò–ù–ò:**
${analysis.news.map(item => `‚Ä¢ ${item}`).join('\n')}

üö® *–°–∏–≥–Ω–∞–ª–∏:*
${analysis.signals.map(s => `‚Ä¢ ${s}`).join('\n')}

üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è:*
${analysis.recommendation}

‚ö†Ô∏è *–ù–µ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∞ –ø–æ—Ä–∞–¥–∞!*`;

  bot.sendMessage(chatId, response);
});

// –ì–æ–¥–∏–Ω–Ω–∏–π –∑–≤—ñ—Ç –∑ –∞–Ω–∞–ª—ñ–∑–æ–º –∫–∏—Ç—ñ–≤ —Ç–∞ –Ω–æ–≤–∏–Ω–∞–º–∏
cron.schedule('0 * * * *', async () => {
  console.log('üïê –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–æ–≥–æ –∑–≤—ñ—Ç—É –∑ –∞–Ω–∞–ª—ñ–∑–æ–º –∫–∏—Ç—ñ–≤ —Ç–∞ –Ω–æ–≤–∏–Ω–∞–º–∏...');
  
  for (const chatId in userTokens) {
    const tokens = userTokens[chatId];
    if (tokens && tokens.length > 0) {
      let report = `üïê **–ü–†–û–§–ï–°–Ü–ô–ù–ò–ô –ó–í–Ü–¢: –ö–Ü–¢–ò + –ù–û–í–ò–ù–ò**\n\n`;
      
      for (const tokenName of tokens) {
        const analysis = await analyzeTradingRisks(tokenName);
        
        if (analysis.data) {
          report += `**${tokenName}**\n`;
          report += `üìä ${analysis.riskLevel}\n`;
          report += `üí∞ $${analysis.data.price.toLocaleString()} (${analysis.data.priceChange24h.toFixed(1)}%)\n`;
          report += `üêã ${analysis.whaleData.longPercentage}% –ª–æ–Ω–≥ / ${analysis.whaleData.shortPercentage}% —à–æ—Ä—Ç\n`;
          report += `üì∞ ${analysis.news[0]}\n\n`;
        }
      }
      
      report += `_–ù–∞—Å—Ç—É–ø–Ω–∏–π –∑–≤—ñ—Ç —á–µ—Ä–µ–∑ –≥–æ–¥–∏–Ω—É_`;
      
      if (report.length > 50) {
        try {
          await bot.sendMessage(chatId, report);
          console.log(`‚úÖ –ó–≤—ñ—Ç –∑ –∞–Ω–∞–ª—ñ–∑–æ–º –∫–∏—Ç—ñ–≤ —Ç–∞ –Ω–æ–≤–∏–Ω–∞–º–∏ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –¥–ª—è ${chatId}`);
        } catch (error) {
          console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏:', error.message);
        }
      }
    }
  }
});

console.log('‚úÖ –ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π –±–æ—Ç –∑ –Ω–æ–≤–∏–Ω–∞–º–∏ —Ç–∞ –∞–Ω–∞–ª—ñ–∑–æ–º –∫–∏—Ç—ñ–≤ —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∏–π!');
